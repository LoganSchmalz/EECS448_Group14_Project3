We chose to use function-oriented design for this project. Function-oriented design is easy to implement in JavaScript, and due to the scope of the project we believed it was not necessary to separate code into explicit objects. We have a minimal amount of data that needs to be stored for the game logic, so it did not make sense to try to compartmentalize the data or the functions that act on the data. For example, the only real data we need to store for Deal or No Deal is the cases and the values that they hold. When cases are removed, they really just need to be removed from the list of remaining cases, so we just need to remove them from the array. Furthermore, most of the functions exist mainly to interpret and modify the remaining cases. Thus, separating the logic into multiple objects would really only serve to make the function calls more difficult and less efficient. Similarly, when we do implement rendering in Project 4, it will continue to rely heavily on the game data, and should be simple enough that not separating the rendering code into its own object (just its own file) should not negatively affect the organization of the code. The strengths of the other design paradigms, like aspect-oriented design, data structure-centered design, service-oriented design, or event-driven design, did not seem to apply to this project. Because the vast majority of the functions rely on the same data, function-oriented design seems to be the best fit for the organization of our project.