Given our choice of function-oriented design, the software architecture of our prototype is Pipes-and-Filters. The only input data we need from the user is which case numbers they want to remove and whether they accept or reject the Banker's offer. Therefore the chosen case number is really the only data that needs to be converted or transformed anyway, and the corresponding case numbers in the cases array are removed. The values of the remaining cases are then outputted to the user and then they are used as a sort of input for the next iteration of the game loop, since the player will now use this information to make their next decision. The case values are also an input for the Banker, who decides how much money to offer to the player based on what case amounts have been revealed and which cases are still on the board. Overall, the scale of this game is not large enough to require any of the architectures that deal with online connections or servers since the game is played locally. The simplicity of the Pipes-and-Filters architecture makes it ideal for our project since it makes it easy to design the input/output behavior of the game. It also allows us more flexibility for Project 4 and any potential new features and game modes we may implement. For example, a possible variation is for the player to be able to hold onto more than one briefcase. This would alter the amounts of money the Banker would offer but the flow of information would remain the same. For the purposes of this one game there is a small degree of scalability since the variations we have planned are not so complex that we would have to consider other more complicated architectures. 