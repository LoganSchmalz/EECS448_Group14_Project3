Following our function-oriented design paradigm, we used the Iterator, State, and Strategy design patterns. We used an iterator to go through the elements of the cases array and remove any cases selected by the player. An iterator was also used to display the cases' values after each round. For the basic gameplay loop there are two main game states, selecting cases to remove and accepting/rejecting the Banker's offer to buy the player's case.  For Project 4 we foresee the need to include more states in order to implement some of the game mode variations we are considering, so the State design pattern will be utilized more then. The Strategy design pattern is used to determine the amounts the Banker is willing to offer to the player. Their strategy is to offer the least amount of money that the player is willing to accept while the player's goal is to earn the most amount of money possible. Therefore the Banker's decisions are influenced by the game state, the player's previous decisions, and the values of the cases remaining on the board. Therefore the Banker's strategy may change depending on which round it is. For example, in early rounds the Banker will usually offer the average of the remaining cases while in later rounds it's possible that they offer more than double the amount of money in the player's case. This dynamic strategy requires a nontrivial algorithm that the Strategy pattern allows us to define and describe such an algorithm. With the planned features for Project 4 we anticipate the Banker's algorithm to become more complex, such as if the player is allowed to keep multiple briefcases, so this design pattern will be used much more heavily in future project iterations.